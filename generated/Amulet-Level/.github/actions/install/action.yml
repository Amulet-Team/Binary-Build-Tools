name: 'Install Specialised Amulet-Level'
description: 'Build, publish and install this library specialised for the installed compiler. Requires Python, build and twine.'
inputs:
  twine-username:
    description: 'The twine username'
    required: true
  twine-password:
    description: 'The twine password'
    required: true
  compiler-specifier:
    description: 'The PEP 440 version specifier for the compiler library'
    required: true
  pyext-specifier:
    description: 'The PEP 440 version specifier for the pybind11-extensions library'
    required: true
  io-specifier:
    description: 'The PEP 440 version specifier for the io library'
    required: true
  leveldb-specifier:
    description: 'The PEP 440 version specifier for the leveldb library'
    required: true
  utils-specifier:
    description: 'The PEP 440 version specifier for the Utils library'
    required: true
  zlib-specifier:
    description: 'The PEP 440 version specifier for the zlib library'
    required: true
  nbt-specifier:
    description: 'The PEP 440 version specifier for the NBT library'
    required: true
  core-specifier:
    description: 'The PEP 440 version specifier for the Core library'
    required: true
  game-specifier:
    description: 'The PEP 440 version specifier for the Game library'
    required: true
  anvil-specifier:
    description: 'The PEP 440 version specifier for the Anvil library'
    required: true
  level-specifier:
    description: 'The PEP 440 version specifier for the Level library'
    required: true
outputs:
  version:
    description: "The version number of the installed library."
    value: ${{ steps.get-version.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.twine-username }}" ]; then
          echo "twine-username is empty"
          exit 1
        fi

        if [ -z "${{ inputs.twine-password }}" ]; then
          echo "twine-password is empty"
          exit 1
        fi

        if [ -z "${{ inputs.compiler-specifier }}" ]; then
          echo "compiler-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.pyext-specifier }}" ]; then
          echo "pyext-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.io-specifier }}" ]; then
          echo "io-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.leveldb-specifier }}" ]; then
          echo "leveldb-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.utils-specifier }}" ]; then
          echo "utils-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.zlib-specifier }}" ]; then
          echo "zlib-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.nbt-specifier }}" ]; then
          echo "nbt-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.core-specifier }}" ]; then
          echo "core-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.game-specifier }}" ]; then
          echo "game-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.anvil-specifier }}" ]; then
          echo "anvil-specifier is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.level-specifier }}" ]; then
          echo "level-specifier is empty"
          exit 1
        fi

    - name: Install Prebuilt
      id: install
      shell: bash
      continue-on-error: true
      run: |
        python -m pip install --only-binary amulet-level amulet-compiler-version${{ inputs.compiler-specifier }} amulet-pybind11_extensions${{ inputs.pyext-specifier }} amulet-io${{ inputs.io-specifier }} amulet-leveldb${{ inputs.leveldb-specifier }} amulet-utils${{ inputs.utils-specifier }} amulet-zlib${{ inputs.zlib-specifier }} amulet-nbt${{ inputs.nbt-specifier }} amulet-core${{ inputs.core-specifier }} amulet-game${{ inputs.game-specifier }} amulet-anvil${{ inputs.anvil-specifier }} amulet-level${{ inputs.level-specifier }}

    - name: Build
      if: steps.install.outcome == 'failure'
      shell: bash
      env:
        AMULET_FREEZE_COMPILER: 1
        AMULET_PYBIND11_EXTENSIONS_REQUIREMENT: ${{ inputs.pyext-specifier }}
        AMULET_IO_REQUIREMENT: ${{ inputs.io-specifier }}
        AMULET_LEVELDB_REQUIREMENT: ${{ inputs.leveldb-specifier }}
        AMULET_UTILS_REQUIREMENT: ${{ inputs.utils-specifier }}
        AMULET_ZLIB_REQUIREMENT: ${{ inputs.zlib-specifier }}
        AMULET_NBT_REQUIREMENT: ${{ inputs.nbt-specifier }}
        AMULET_CORE_REQUIREMENT: ${{ inputs.core-specifier }}
        AMULET_GAME_REQUIREMENT: ${{ inputs.game-specifier }}
        AMULET_ANVIL_REQUIREMENT: ${{ inputs.anvil-specifier }}
      run: |
        python -m build --wheel "${{ github.action_path }}"/../../..

    - name: Publish
      if: steps.install.outcome == 'failure'
      shell: bash
      env:
        TWINE_USERNAME: ${{ inputs.twine-username }}
        TWINE_PASSWORD: ${{ inputs.twine-password }}
      run: |
        twine upload "${{ github.action_path }}"/../../../dist/* --skip-existing

    - name: Install
      if: steps.install.outcome == 'failure'
      shell: bash
      run: |
        python -m pip install "${{ github.action_path }}"/../../../dist/amulet_level-*.whl

    - name: Get __version__
      id: get-version
      shell: bash
      run: |
        version=$(python -c "import amulet.level; print(amulet.level.__version__)")
        echo "version=$version" >> "$GITHUB_OUTPUT"
