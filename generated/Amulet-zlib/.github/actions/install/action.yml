name: 'Install Specialised Amulet-zlib'
description: 'Build, publish and install this library specialised for the installed compiler. Requires Python, build and twine.'
inputs:
  twine-username:
    description: 'The twine username'
    required: true
  twine-password:
    description: 'The twine password'
    required: true
  compiler-specifier:
    description: 'The PEP 440 version specifier for the compiler library'
    required: true
  pybind11-specifier:
    description: 'The PEP 440 version specifier for the pybind11 library'
    required: true
  pybind11-extensions-specifier:
    description: 'The PEP 440 version specifier for the Amulet-pybind11-extensions library'
    required: true
  zlib-specifier:
    description: 'The PEP 440 version specifier for the Amulet-zlib library'
    required: true
outputs:
  version:
    description: "The version number of the installed library."
    value: ${{ steps.get-version.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.twine-username }}" ]; then
          echo "twine-username is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.twine-password }}" ]; then
          echo "twine-password is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.compiler-specifier }}" ]; then
          echo "compiler-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.pybind11-specifier }}" ]; then
          echo "pybind11-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.pybind11-extensions-specifier }}" ]; then
          echo "pybind11-extensions-specifier is empty"
          exit 1
        fi

        if [ -z "${{ inputs.zlib-specifier }}" ]; then
          echo "zlib-specifier is empty"
          exit 1
        fi

    - name: Install Prebuilt
      id: install
      shell: bash
      continue-on-error: true
      run: |
        python -m pip install --only-binary amulet-zlib amulet-compiler-version${{ inputs.compiler-specifier }} pybind11${{ inputs.pybind11-specifier }} amulet-pybind11-extensions${{ inputs.pybind11-extensions-specifier }} amulet-zlib${{ inputs.zlib-specifier }}

    - name: Build
      if: steps.install.outcome == 'failure'
      shell: bash
      env:
        AMULET_FREEZE_COMPILER: 1
        PYBIND11_REQUIREMENT: ${{ inputs.pybind11-specifier }}
        AMULET_PYBIND11_EXTENSIONS_REQUIREMENT: ${{ inputs.pybind11-extensions-specifier }}
      run: |
        python -m build --wheel "${{ github.action_path }}"/../../..

    - name: Publish
      if: steps.install.outcome == 'failure'
      shell: bash
      env:
        TWINE_USERNAME: ${{ inputs.twine-username }}
        TWINE_PASSWORD: ${{ inputs.twine-password }}
      run: |
        twine upload "${{ github.action_path }}"/../../../dist/* --skip-existing

    - name: Install
      if: steps.install.outcome == 'failure'
      shell: bash
      run: |
        cache_dir=$(python -m pip cache dir)
        rm -rf "$cache_dir"/http*
        python -m pip install --only-binary amulet-zlib amulet-compiler-version${{ inputs.compiler-specifier }} pybind11${{ inputs.pybind11-specifier }} amulet-pybind11-extensions${{ inputs.pybind11-extensions-specifier }} amulet-zlib${{ inputs.zlib-specifier }}

    - name: Get __version__
      id: get-version
      shell: bash
      run: |
        version=$(python -c "import amulet.zlib; print(amulet.zlib.__version__)")
        echo "version=$version" >> "$GITHUB_OUTPUT"
