name: 'Install dependencies'
description: 'Build if needed and install the library dependencies'
inputs:
  python-version:
    description: 'The version of Python to install'
    required: true
  username:
    description: 'The pypi username'
    required: true
  compiler-version-password:
    description: 'The password for the compiler-version library'
    required: true
  zlib-password:
    description: 'The password for the zlib library'
    required: true
  nbt-password:
    description: 'The password for the nbt library'
    required: true
  core-password:
    description: 'The password for the core library'
    required: true
  rest-token:
    description: 'The Github authentication token to use to access the REST API.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.python-version }}" ]; then
          echo "python-version is empty"
          exit 1
        fi

        if [ -z "${{ inputs.username }}" ]; then
          echo "username is empty"
          exit 1
        fi

        if [ -z "${{ inputs.compiler-version-password }}" ]; then
          echo "compiler-version-password is empty"
          exit 1
        fi

        if [ -z "${{ inputs.zlib-password }}" ]; then
          echo "zlib-password is empty"
          exit 1
        fi

        if [ -z "${{ inputs.nbt-password }}" ]; then
          echo "nbt-password is empty"
          exit 1
        fi
        
        if [ -z "${{ inputs.core-password }}" ]; then
          echo "core-password is empty"
          exit 1
        fi

        if [ -z "${{ inputs.rest-token }}" ]; then
          echo "rest-token is empty"
          exit 1
        fi

    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        pip cache purge
        python -m pip install --upgrade pip
        pip install build twine packaging

    - name: Get Dependencies
      id: dep
      shell: bash
      run: |
        mkdir -p build
        pip install --dry-run --report build/install.json .
        io=$(python -c "import json; f = open('build/install.json', encoding='utf-8'); print(next(l['metadata']['version'] for l in json.load(f)['install'] if l['metadata']['name'] == 'amulet-io'))")
        echo "io=$io" >> "$GITHUB_OUTPUT"
        zlib=$(python -c "import json; f = open('build/install.json', encoding='utf-8'); print(next(l['metadata']['version'] for l in json.load(f)['install'] if l['metadata']['name'] == 'amulet-zlib'))")
        echo "zlib=$zlib" >> "$GITHUB_OUTPUT"
        nbt=$(python -c "import json; f = open('build/install.json', encoding='utf-8'); print(next(l['metadata']['version'] for l in json.load(f)['install'] if l['metadata']['name'] == 'amulet-nbt'))")
        echo "nbt=$nbt" >> "$GITHUB_OUTPUT"
        core=$(python -c "import json; f = open('build/install.json', encoding='utf-8'); print(next(l['metadata']['version'] for l in json.load(f)['install'] if l['metadata']['name'] == 'amulet-core'))")
        echo "core=$core" >> "$GITHUB_OUTPUT"

    - name: Clone Amulet-Compiler-Version
      uses: actions/checkout@v4
      with:
        repository: 'Amulet-Team/Amulet-Compiler-Version'
        ref: '3.0'
        path: 'build/pylib/Amulet-Compiler-Version'

    - name: Install Amulet-Compiler-Version
      id: compiler
      uses: ./build/pylib/Amulet-Compiler-Version/.github/actions/install
      with:
        twine-username: ${{ inputs.username }}
        twine-password: ${{ inputs.compiler-version-password }}

    - name: Specialise Specifiers
      id: dep2
      shell: bash
      run: |
        io=$(python -c "import requirements; print(requirements.get_specifier_set(\"${{ steps.dep.outputs.io }}\"))")
        echo "io=$io" >> "$GITHUB_OUTPUT"
        zlib=$(python -c "import requirements; print(requirements.get_specifier_set(\"${{ steps.dep.outputs.zlib }}\"))")
        echo "zlib=$zlib" >> "$GITHUB_OUTPUT"
        nbt=$(python -c "import requirements; print(requirements.get_specifier_set(\"${{ steps.dep.outputs.nbt }}\"))")
        echo "nbt=$nbt" >> "$GITHUB_OUTPUT"
        core=$(python -c "import requirements; print(requirements.get_specifier_set(\"${{ steps.dep.outputs.core }}\"))")
        echo "core=$core" >> "$GITHUB_OUTPUT"

    - name: Clone Amulet-zlib
      uses: Amulet-Team/checkout-pep440@v1
      with:
        repository: 'Amulet-Team/Amulet-zlib'
        specifier: '==${{ steps.dep.outputs.zlib }}'
        path: 'build/pylib/Amulet-zlib'
        rest-token: ${{ inputs.rest-token }}

    - name: Install Amulet-zlib
      uses: ./build/pylib/Amulet-zlib/.github/actions/install
      with:
        twine-username: ${{ inputs.username }}
        twine-password: ${{ inputs.zlib-password }}
        compiler-specifier: '==${{ steps.compiler.outputs.version }}'
        zlib-specifier: ${{ steps.dep2.outputs.zlib }}

    - name: Clone Amulet-NBT
      uses: Amulet-Team/checkout-pep440@v1
      with:
        repository: 'Amulet-Team/Amulet-NBT'
        specifier: '==${{ steps.dep.outputs.nbt }}'
        path: 'build/pylib/Amulet-NBT'
        rest-token: ${{ inputs.rest-token }}

    - name: Install Amulet-NBT
      uses: ./build/pylib/Amulet-NBT/.github/actions/install
      with:
        twine-username: ${{ inputs.username }}
        twine-password: ${{ inputs.nbt-password }}
        compiler-specifier: '==${{ steps.compiler.outputs.version }}'
        io-specifier: ${{ steps.dep2.outputs.io }}
        zlib-specifier: ${{ steps.dep2.outputs.zlib }}
        nbt-specifier: ${{ steps.dep2.outputs.nbt }}

    - name: Clone Amulet-Core
      uses: Amulet-Team/checkout-pep440@v1
      with:
        repository: 'Amulet-Team/Amulet-Core'
        specifier: '==${{ steps.dep.outputs.core }}'
        path: 'build/pylib/Amulet-Core'
        rest-token: ${{ inputs.rest-token }}

    - name: Install Amulet-Core
      uses: ./build/pylib/Amulet-Core/.github/actions/install
      with:
        twine-username: ${{ inputs.username }}
        twine-password: ${{ inputs.core-password }}
        compiler-specifier: '==${{ steps.compiler.outputs.version }}'
        io-specifier: ${{ steps.dep2.outputs.io }}
        nbt-specifier: ${{ steps.dep2.outputs.nbt }}
        core-specifier: ${{ steps.dep2.outputs.core }}
